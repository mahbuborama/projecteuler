/* PROBLEM 2:
 * Each new term in the Fibonacci sequence is generated by adding 
 * the previous two terms. By starting with 1 and 2, the first 10 terms will be:
 * 
 * 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, ...
 * 
 * By considering the terms in the Fibonacci sequence whose values do not 
 * exceed four million, find the sum of the even-valued terms.
*/

import java.lang.Math;

public class pe2 {

	public static final double phi = (1 + Math.sqrt(5)) / 2;
	public static final double psi = (1 - Math.sqrt(5)) / 2;
	
	public static void main(String[] args) {
		int the_sum = 0;
		
		/* We will not calculate all the Fibonoacci numbers and check if they are divisible
		 * by 2. From the rules of addition, we know that the sum of an even and odd number is
		 * odd. Looking at the Fibonacci sequence,, we can notice a pattern: every 3rd number
		 * (starting from an index of 0) is even. 
		 * 
		 * We only need to calculate every 3rd Fibonacci number less than or equal
		 * to 4,000,000 and sum those numbers. The upper bound on the loop is just an 
		 * arbitrarily-picked large number. 
		 */
		for (int i=1; i<5000000; i++) {
			int num = (int) fib_binet(3*i);
			if (num > 4000000) {
				break;
			}
			the_sum = the_sum + num;
		}
		
		System.out.println(the_sum);
	}
	
	/* Binet's closed-form solution for finding the nth Fibonacci number:
	 * 
	 * F(n) = (phi^n - psi^n) / (sqrt(5))
	 * 
	 * where phi and psi are the values defined at the beginning of the code
	 */
	public static double fib_binet(int n) {
		return (Math.pow(phi, (double) n) - Math.pow(psi,  (double) n)) / Math.sqrt(5);
	}

}
